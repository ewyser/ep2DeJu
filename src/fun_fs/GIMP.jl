function NdN(δx::Float64,h::Float64,lp::Float64)                                                         
    if     abs(δx) <    lp                       
        ϕ  = 1.0-((4.0*δx^2+(2.0*lp)^2)/(8.0*h*lp))                                   
        ∂ϕ = -((8.0*δx)/(8.0*h*lp))                                     
    elseif (abs(δx)>=   lp ) && (abs(δx)<=(h-lp))
        ϕ  = 1.0-(abs(δx)/h)                                                       
        ∂ϕ = sign(δx)*(-1.0/h)                                                   
    elseif (abs(δx)>=(h-lp)) && (abs(δx)< (h+lp))
        ϕ  = ((h+lp-abs(δx))^2)/(4.0*h*lp)                                       
        ∂ϕ = -sign(δx)*(h+lp-abs(δx))/(2.0*h*lp)
    else
        ϕ  = 0.0                                                                 
        ∂ϕ = 0.0                                  
    end
    return ϕ,∂ϕ    
end
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
function ϕ∂ϕ!(mpD,meD)
    @threads for mp in 1:mpD.nmp
        for nn in 1:meD.nn
            # compute basis functions
            id     = mpD.p2n[mp,nn]
            ξ      = mpD.x[mp,1] - meD.x[id] 
            η      = mpD.x[mp,2] - meD.z[id]
            ϕx,dϕx = NdN(ξ,meD.h[1],mpD.l0[mp,1])
            ϕz,dϕz = NdN(η,meD.h[2],mpD.l0[mp,2])
            # convolution of basis function
            mpD.ϕ∂ϕ[mp,nn,1] =  ϕx*  ϕz                                        
            mpD.ϕ∂ϕ[mp,nn,2] = dϕx*  ϕz                                        
            mpD.ϕ∂ϕ[mp,nn,3] =  ϕx* dϕz
        end
        # B-matrix assembly
        mpD.B[1,1:2:end,mp] = mpD.ϕ∂ϕ[mp,:,2]
        mpD.B[2,2:2:end,mp] = mpD.ϕ∂ϕ[mp,:,3]
        mpD.B[4,1:2:end,mp] = mpD.ϕ∂ϕ[mp,:,3]
        mpD.B[4,2:2:end,mp] = mpD.ϕ∂ϕ[mp,:,2]
    end
    return nothing
end